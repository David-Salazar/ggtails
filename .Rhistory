library(devtools)
use_r("stat_mean_excess")
use_package("ggplot2")
document()
document()
document()
document()
document()
use_package("ggplot2")
document()
load_all()
load_all()
document()
x <- rnorm(1000)
ggplot(aes(data.frame(x))) %>% stat_mean_excess()
ggplot(aes(data.frame(x))) + stat_mean_excess()
ggplot2::ggplot(aes(data.frame(x))) + stat_mean_excess()
install()
library("ggtails")
ggplot(aes(data.frame(x))) + stat_mean_excess()
library(ggtails)
ggplot(aes(data.frame(x))) + stat_mean_excess()
use_package("ggplot2", type = "depends")
document()
check()
install()
ggplot(aes(data.frame(x))) + stat_mean_excess()
library(ggtails)
ggplot(data.frame(x), aes(sample = x)) + stat_mean_excess()
use_r("stat_zipf")
document()
check()
install()
library(ggtails)
ggplot(data.frame(x), aes(sample = x)) + stat_zipf()
documen()
document()
library(ggtails)
ggplot(data.frame(x), aes(sample = x)) + stat_zipf()
use_readme_rmd()
library(ggtails)
library(dplyr)
library(ggtails)
library(dplyr)
gaussian <- rnorm(1000)
lognormal <- rlnorm(1000)
exponential <- rexp(1000)
pareto <- 1/(runif(1000))^(1/1.16) # inverse transform sampling
tibble(gaussian, lognormal, exponential, pareto)
library(tidyverse)
tibble(sim = 1:1000, gaussian, lognormal, exponential, pareto) %>%
pivot_longer(-sim, names_to = "random_variable", values_to = "value")
tibble(sim = 1:1000, gaussian, lognormal, exponential, pareto) %>%
pivot_longer(-sim, names_to = "random_variable", values_to = "value") %>%
ggplot(aes(sample = value)) +
stat_zipf()
tibble(sim = 1:1000, gaussian, lognormal, exponential, pareto) %>%
pivot_longer(-sim, names_to = "random_variable", values_to = "value") %>%
ggplot(aes(sample = value, color = random_variable)) +
stat_zipf()
tibble(sim = 1:1000, gaussian, lognormal, exponential, pareto) %>%
pivot_longer(-sim, names_to = "random_variable", values_to = "value") %>%
ggplot(aes(sample = value, color = random_variable)) +
stat_zipf() +
scale_x_log10() +
scale_y_log10()
tibble(sim = 1:1000, gaussian, lognormal, exponential, pareto) %>%
pivot_longer(-sim, names_to = "random_variable", values_to = "value") %>%
ggplot(aes(sample = value, color = random_variable)) +
stat_zipf() +
scale_x_log10() +
scale_y_log10() +
theme_minimal()
library(ggtails)
library(tidyverse)
gaussian <- rnorm(10000)
lognormal <- rlnorm(10000)
exponential <- rexp(10000)
pareto <- 1/(runif(10000))^(1/1.16) # inverse transform sampling
tibble(sim = 1:10000, gaussian, lognormal, exponential, pareto) %>%
pivot_longer(-sim, names_to = "random_variable", values_to = "value") %>%
ggplot(aes(sample = value, color = random_variable)) +
stat_zipf() +
scale_x_log10() +
scale_y_log10() +
theme_minimal()
tibble(sim = 1:10000, gaussian, lognormal, exponential, pareto) %>%
pivot_longer(-sim, names_to = "random_variable", values_to = "value") %>%
ggplot(aes(sample = value, color = random_variable)) +
stat_mean_excess()
tibble(sim = 1:10000, gaussian, lognormal, exponential, pareto) %>%
pivot_longer(-sim, names_to = "random_variable", values_to = "value") %>%
ggplot(aes(sample = value)) +
stat_mean_excess() +
facet_wrap(~random_variable, scales = "free")
tibble(sim = 1:10000, gaussian, lognormal, exponential, pareto) %>%
pivot_longer(-sim, names_to = "random_variable", values_to = "value") %>%
ggplot(aes(sample = value)) +
stat_mean_excess() +
facet_wrap(~random_variable, scales = "free") +
theme_minimal()
tibble(sim = 1:10000, gaussian, lognormal, exponential, pareto) %>%
pivot_longer(-sim, names_to = "random_variable", values_to = "value") %>%
ggplot(aes(sample = value, color = random_variable)) +
stat_zipf(alpha = 0.1) +
scale_x_log10() +
scale_y_log10() +
theme_minimal()
tibble(sim = 1:10000, gaussian, lognormal, exponential, pareto) %>%
pivot_longer(-sim, names_to = "random_variable", values_to = "value") %>%
ggplot(aes(sample = value)) +
stat_mean_excess(alpha = 0.1) +
facet_wrap(~random_variable, scales = "free") +
theme_minimal()
rmarkdown::render("README.Rmd") ## or use "Knit HTML" in RStudio
tibble(sim = 1:10000, gaussian, lognormal, exponential, pareto) %>%
pivot_longer(-sim, names_to = "random_variable", values_to = "value") %>%
ggplot(aes(sample = value, color = random_variable)) +
stat_zipf(alpha = 0.1) +
scale_x_log10() +
scale_y_log10() +
theme_minimal() +
labs(title = "Zipf plot in ggplot2 workflow")
tibble(sim = 1:10000, gaussian, lognormal, exponential, pareto) %>%
pivot_longer(-sim, names_to = "random_variable", values_to = "value") %>%
ggplot(aes(sample = value, color = random_variable)) +
stat_zipf(alpha = 0.1) +
scale_x_log10() +
scale_y_log10() +
theme_minimal() +
labs(title = "Zipf plot in ggplot2 workflow",
x = "Log(x)",
y = "Log(Survival(x))")
tibble(sim = 1:10000, gaussian, lognormal, exponential, pareto) %>%
pivot_longer(-sim, names_to = "random_variable", values_to = "value") %>%
ggplot(aes(sample = value)) +
stat_mean_excess(alpha = 0.1) +
facet_wrap(~random_variable, scales = "free") +
theme_minimal() +
labs(title = "Mean Excess plot works with facetting!")
library(ggtails)
library(tidyverse)
gaussian <- rnorm(10000)
lognormal <- rlnorm(10000)
exponential <- rexp(10000)
pareto <- 1/(runif(10000))^(1/1.16) # inverse transform sampling
tibble(sim = 1:10000, lognormal, exponential, pareto) %>%
pivot_longer(-sim, names_to = "random_variable", values_to = "value") %>%
ggplot(aes(sample = value, color = random_variable)) +
stat_zipf(alpha = 0.1) +
scale_x_log10() +
scale_y_log10() +
theme_minimal() +
labs(title = "Zipf plot in ggplot2 workflow",
x = "Log(x)",
y = "Log(Survival(x))")
tibble(sim = 1:10000, gaussian, lognormal, exponential, pareto) %>%
pivot_longer(-sim, names_to = "random_variable", values_to = "value") %>%
ggplot(aes(sample = value)) +
stat_mean_excess(alpha = 0.1) +
facet_wrap(~random_variable, scales = "free") +
theme_minimal() +
labs(title = "Mean Excess plot works with facetting!")
rmarkdown::render("README.Rmd") ## or use "Knit HTML" in RStudio
rmarkdown::render("README.Rmd") ## or use "Knit HTML" in RStudio
